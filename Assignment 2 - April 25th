// See https://aka.ms/new-console-template for more information


using System;
using System.Collections.Generic;
using System.Data;
using Npgsql;
using static System.Runtime.InteropServices.JavaScript.JSType;
using static Npgsql.Replication.PgOutput.Messages.RelationMessage;

class Sample
{
    static void Main(string[] args)
    {
        // Connect to a PostgreSQL database
        NpgsqlConnection conn = new NpgsqlConnection("Server=127.0.0.1:5432;User Id=postgres; " +
           "Password=Aristotleangel000;Database=prods;");
        conn.Open();

        // Define a query returning a single row result set
        NpgsqlCommand command = new NpgsqlCommand("SELECT * FROM product", conn);


        // Execute the query and obtain the value of the first column of the first row
        //Int64 count = (Int64)command.ExecuteScalar();
        NpgsqlDataReader reader = command.ExecuteReader();



        // #7 //
        //Display the id, the description, and the number of items for each product that has between 12 and 30 items. 
        

            DataTable dt = new DataTable();
        dt.Load(reader);

        //creating a new table with only three colunms from dt
        DataTable selectedColumns = dt.DefaultView.ToTable(false, "prod_id", "prod_desc", "prod_quantity");

        //displaying column titles
        Console.WriteLine("#7:");
        Console.WriteLine("prod_id" + "            " + "prod_quantity" + "                     " + "prod_desc");

        //for each row in the new table selectedColumns
        foreach (DataRow row in selectedColumns.Rows)
        {
            //if value in prod_quantity is greater then 12 and less then 30
            if ((Int16)row["prod_quantity"] >= 12 && (Int16)row["prod_quantity"] <= 30)
            {
                //display that row
                //Console.WriteLine(dt.DefaultView.ToTable(false, row["prod_id"].ToString(), row["prod_desc"].ToString(), row["prod_quantity"].ToString()));
              
                Console.WriteLine(row["prod_id"].ToString() + "              " + row["prod_quantity"].ToString() + "                                " + row["prod_desc"].ToString());

                //Console.Write(dataRow.ItemArray[j]);
                //for (int i = 0; i < colWidths[data.Columns[j].ColumnName] - dataRow.ItemArray[j].ToString().Length + 14; i++) Console.Write(" ");
            }
        }




        // #20 //
        //Display the sales representative’s id and the sum of the balances of all customers represented by each of these sales representatives, but limit the result to those sales representatives whose sum is more than $12,000.

        // Define a query returning a single row result set
        NpgsqlCommand command2 = new NpgsqlCommand("SELECT * FROM customer", conn);


        // Execute the query and obtain the value of the first column of the first row
        //Int64 count = (Int64)command.ExecuteScalar();
        NpgsqlDataReader reader2 = command2.ExecuteReader();

        //create new data table
        DataTable ct = new DataTable();
        ct.Load(reader2);

        //creating a new table with only three colunms from ct
        DataTable selectedColumns2 = ct.DefaultView.ToTable(false, "rep_id", "cust_balance");

        //printing #20 results
        main2(selectedColumns2);

        
        conn.Close();
    }


    static void main2(DataTable data)
    {
        Console.WriteLine();
        Console.WriteLine("#20:");
        Console.WriteLine("rep_id" + "            " + "cust_balance");

        //create a dictionary
        Dictionary<string, decimal> repdict = new Dictionary<string, decimal>();
        decimal sum;



        foreach (DataRow dataRow in data.Rows)
        {
            if (repdict.ContainsKey(dataRow["rep_id"].ToString()))
            {
                sum = repdict[dataRow["rep_id"].ToString()] + (decimal)dataRow["cust_balance"];
                repdict[dataRow["rep_id"].ToString()] = sum;

            }
            else
            {
                repdict.Add(dataRow["rep_id"].ToString(), (decimal)dataRow["cust_balance"]);
            }
        }

        foreach (var traverser in repdict)
        {
            if (traverser.Value >= 12000)
            {
                Console.WriteLine(traverser.Key + "               " + traverser.Value);

            }
        }
    }

    // 20 printing code //
    static void print_results_num20(DataTable data)
    {
        Console.WriteLine();
        Console.WriteLine("#20:");
        Dictionary<string, int> colWidths = new Dictionary<string, int>();

        foreach (DataColumn col in data.Columns)
        {

            Console.Write(col.ColumnName);
            var maxLabelSize = data.Rows.OfType<DataRow>()
                    .Select(m => (m.Field<object>(col.ColumnName)?.ToString() ?? "").Length)
                    .OrderByDescending(m => m).FirstOrDefault();

            colWidths.Add(col.ColumnName, maxLabelSize);
            for (int i = 0; i < maxLabelSize - col.ColumnName.Length + 14; i++) Console.Write(" ");
        }

        Console.WriteLine();

        foreach (DataRow dataRow in data.Rows)
        {
            for (int j = 0; j < dataRow.ItemArray.Length; j++)
            {
                // print 
                Console.Write(dataRow.ItemArray[j]);
                for (int i = 0; i < colWidths[data.Columns[j].ColumnName] - dataRow.ItemArray[j].ToString().Length + 14; i++)
                {
                    Console.Write(" ");
                }
            }
            Console.WriteLine();
        }
    }
}

